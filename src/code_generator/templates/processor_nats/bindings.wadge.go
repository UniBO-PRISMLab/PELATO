//go:build !wasm && !wasi && !wasip1 && !wasip2 && !wasm_unknown && !tinygo.wasm

// Code generated by wadge-bindgen-go DO NOT EDIT

package main

import (
	gitea_rebus_ninja__lore__wasm___nats___stream___client__gen__wasmcloud__messaging__consumer "gitea.rebus.ninja/lore/wasm-nats-stream-client/gen/wasmcloud/messaging/consumer"
	gitea_rebus_ninja__lore__wasm___nats___stream___client__gen__wasmcloud__messaging__types "gitea.rebus.ninja/lore/wasm-nats-stream-client/gen/wasmcloud/messaging/types"
	github_com__bytecodealliance__wasm___tools___go__cm "github.com/bytecodealliance/wasm-tools-go/cm"
	wadge "go.wasmcloud.dev/wadge"
	"runtime"
	"unsafe"
)

const _ string = runtime.Compiler

var _ unsafe.Pointer

//go:linkname wasmimport_Log gitea.rebus.ninja/lore/wasm-nats-stream-client/gen/wasi/logging/logging.wasmimport_Log
func wasmimport_Log(level0 uint32, context0 *uint8, context1 uint32, message0 *uint8, message1 uint32) {
	var __p runtime.Pinner
	defer __p.Unpin()
	if __err := wadge.WithCurrentInstance(func(__instance *wadge.Instance) error {
		return __instance.Call("wasi:logging/logging@0.1.0-draft", "log", func() unsafe.Pointer {
			ptr := unsafe.Pointer(&level0)
			__p.Pin(ptr)
			return ptr
		}(), func() unsafe.Pointer {
			ptr := unsafe.Pointer(context0)
			__p.Pin(ptr)
			return ptr
		}(), func() unsafe.Pointer {
			ptr := unsafe.Pointer(&context1)
			__p.Pin(ptr)
			return ptr
		}(), func() unsafe.Pointer {
			ptr := unsafe.Pointer(message0)
			__p.Pin(ptr)
			return ptr
		}(), func() unsafe.Pointer {
			ptr := unsafe.Pointer(&message1)
			__p.Pin(ptr)
			return ptr
		}())
	}); __err != nil {
		wadge.CurrentErrorHandler()(__err)
	}
	return
}

//go:linkname wasmimport_Publish gitea.rebus.ninja/lore/wasm-nats-stream-client/gen/wasmcloud/messaging/consumer.wasmimport_Publish
func wasmimport_Publish(msg0 *uint8, msg1 uint32, msg2 *uint8, msg3 uint32, msg4 uint32, msg5 *uint8, msg6 uint32, result *github_com__bytecodealliance__wasm___tools___go__cm.Result[string, struct{}, string]) {
	var __p runtime.Pinner
	defer __p.Unpin()
	if __err := wadge.WithCurrentInstance(func(__instance *wadge.Instance) error {
		return __instance.Call("wasmcloud:messaging/consumer@0.2.0", "publish", func() unsafe.Pointer {
			ptr := unsafe.Pointer(msg0)
			__p.Pin(ptr)
			return ptr
		}(), func() unsafe.Pointer {
			ptr := unsafe.Pointer(&msg1)
			__p.Pin(ptr)
			return ptr
		}(), func() unsafe.Pointer {
			ptr := unsafe.Pointer(msg2)
			__p.Pin(ptr)
			return ptr
		}(), func() unsafe.Pointer {
			ptr := unsafe.Pointer(&msg3)
			__p.Pin(ptr)
			return ptr
		}(), func() unsafe.Pointer {
			ptr := unsafe.Pointer(&msg4)
			__p.Pin(ptr)
			return ptr
		}(), func() unsafe.Pointer {
			ptr := unsafe.Pointer(msg5)
			__p.Pin(ptr)
			return ptr
		}(), func() unsafe.Pointer {
			ptr := unsafe.Pointer(&msg6)
			__p.Pin(ptr)
			return ptr
		}(), func() unsafe.Pointer {
			ptr := unsafe.Pointer(result)
			__p.Pin(ptr)
			return ptr
		}())
	}); __err != nil {
		wadge.CurrentErrorHandler()(__err)
	}
	return
}

//go:linkname wasmimport_Request gitea.rebus.ninja/lore/wasm-nats-stream-client/gen/wasmcloud/messaging/consumer.wasmimport_Request
func wasmimport_Request(subject0 *uint8, subject1 uint32, body0 *uint8, body1 uint32, timeoutMs0 uint32, result *github_com__bytecodealliance__wasm___tools___go__cm.Result[gitea_rebus_ninja__lore__wasm___nats___stream___client__gen__wasmcloud__messaging__consumer.BrokerMessageShape, gitea_rebus_ninja__lore__wasm___nats___stream___client__gen__wasmcloud__messaging__types.BrokerMessage, string]) {
	var __p runtime.Pinner
	defer __p.Unpin()
	if __err := wadge.WithCurrentInstance(func(__instance *wadge.Instance) error {
		return __instance.Call("wasmcloud:messaging/consumer@0.2.0", "request", func() unsafe.Pointer {
			ptr := unsafe.Pointer(subject0)
			__p.Pin(ptr)
			return ptr
		}(), func() unsafe.Pointer {
			ptr := unsafe.Pointer(&subject1)
			__p.Pin(ptr)
			return ptr
		}(), func() unsafe.Pointer {
			ptr := unsafe.Pointer(body0)
			__p.Pin(ptr)
			return ptr
		}(), func() unsafe.Pointer {
			ptr := unsafe.Pointer(&body1)
			__p.Pin(ptr)
			return ptr
		}(), func() unsafe.Pointer {
			ptr := unsafe.Pointer(&timeoutMs0)
			__p.Pin(ptr)
			return ptr
		}(), func() unsafe.Pointer {
			ptr := unsafe.Pointer(result)
			__p.Pin(ptr)
			return ptr
		}())
	}); __err != nil {
		wadge.CurrentErrorHandler()(__err)
	}
	return
}
